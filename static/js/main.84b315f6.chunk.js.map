{"version":3,"sources":["App.tsx","assets/waving.glb","assets/example-tracking-image.zpt","reportWebVitals.ts","index.tsx"],"names":["action","Model","clock","THREE","gltf","useLoader","GLTFLoader","glb","mixer","scene","clipAction","animations","rotateX","Math","PI","useFrame","update","getDelta","object","App","fallback","targetImage","Suspense","position","intensity","id","role","onKeyPress","play","tabIndex","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6HAWIA,E,yECXW,MAA0B,mCCA1B,MAA0B,mD,QFanCC,EAAQ,WACZ,IAAMC,EAAQ,IAAIC,QACZC,EAAOC,oBAAUC,IAAYC,GAC7BC,EAAQ,IAAIL,iBAAqBC,EAAKK,OAO5C,OALAT,EAASQ,EAAME,WAAWN,EAAKO,WAAW,IAC1CP,EAAKK,MAAMG,QAAQC,KAAKC,GAAK,GAE7BC,oBAAS,kBAAMP,EAAMQ,OAAOd,EAAMe,eAE3B,2BAAWC,OAAQd,EAAKK,SA8BlBU,MA3Bf,WACE,OACE,qCACE,cAAC,uBAAD,IACA,eAAC,eAAD,WACE,cAAC,eAAD,IACA,cAAC,WAAD,CAAUC,SAAU,KAApB,SACE,cAAC,eAAD,CAAcC,YAAaA,EAA3B,SACE,cAAC,IAAMC,SAAP,CAAgBF,SAAU,KAA1B,SACE,cAAC,EAAD,UAIN,kCAAkBG,SAAU,CAAC,IAAK,EAAG,GAAIC,UAAW,MACpD,cAAC,SAAD,OAEF,qBACEC,GAAG,gBACHC,KAAK,SACLC,WAAY,kBAAM3B,EAAO4B,QACzBC,SAAU,EACVC,QAAS,kBAAM9B,EAAO4B,QALxB,gCG5BSG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84b315f6.chunk.js","sourcesContent":["import React, { Suspense } from 'react';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport {\n ZapparCamera, ImageTracker, ZapparCanvas, Loader, BrowserCompatibility,\n} from '@zappar/zappar-react-three-fiber';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nimport glb from './assets/waving.glb';\nimport targetImage from './assets/example-tracking-image.zpt';\n\nlet action: THREE.AnimationAction;\n\nconst Model = () => {\n  const clock = new THREE.Clock();\n  const gltf = useLoader(GLTFLoader, glb) as any ;\n  const mixer = new THREE.AnimationMixer(gltf.scene);\n\n  action = mixer.clipAction(gltf.animations[0]);\n  gltf.scene.rotateX(Math.PI / 2);\n\n  useFrame(() => mixer.update(clock.getDelta()));\n\n  return <primitive object={gltf.scene} />;\n};\n\nfunction App() {\n  return (\n    <>\n      <BrowserCompatibility />\n      <ZapparCanvas>\n        <ZapparCamera />\n        <Suspense fallback={null}>\n          <ImageTracker targetImage={targetImage}>\n            <React.Suspense fallback={null}>\n              <Model />\n            </React.Suspense>\n          </ImageTracker>\n        </Suspense>\n        <directionalLight position={[2.5, 8, 5]} intensity={1.5} />\n        <Loader />\n      </ZapparCanvas>\n      <div\n        id=\"zappar-button\"\n        role=\"button\"\n        onKeyPress={() => action.play() }\n        tabIndex={0}\n        onClick={() => action.play() }\n      >Play Animation</div>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","export default __webpack_public_path__ + \"static/media/waving.2a60fd73.glb\";","export default __webpack_public_path__ + \"static/media/example-tracking-image.775f3d2f.zpt\";","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}